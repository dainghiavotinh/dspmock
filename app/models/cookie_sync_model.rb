# -*- coding: utf-8 -*-
### Generated by rprotoc. DO NOT EDIT!
### <proto file: cookie_sync.proto>
# //  NOT  SUPPORTED  currently.
# message  AttributeRow  {
#     message  Column  {
#         //  Must  be  present.
#         optional  string  column_name  =  1  [default  =  ""];;
#         //  Exactly  one  of  the  below  fields  must  be  present,  depending  on
#         //  the  column  type  defined  by  the  attribute  schema.
#         optional  string  str_val  =  2  [default  =  ""];;
#         optional  int64  int_val  =  3  [default  =  0];;
#         optional  bool  bool_val  =  4  [default  =  false];;
#     }
#     repeated  Column  columns  =  1;;
#     //  Time  (seconds  since  the  epoch)  when  user  performed  an  action
#     //  causing  the  row  to  be  added.  Used  for  expiration.
#     optional  int64  time_added  =  2  [default  =  0];;
# }
# 
# //  Update  data  for  a  single  user.  Used  to  update  both  user  attributes
# //  and  user  lists.
# //
# message  UserDataOperation  {
#     //  Google  user  id,  as  provided  by  the  adx  cookie-­matching
#     //  service.  Must  always  be  present.  Specifies  which  user  this
#     //  operation  applies  to.
#     optional  string  user_id  =  1  [default  =  ""];;
#     //  The  following  two  fields  are  only  populated  for  user  list
#     //  operations.
#     //
#     optional  int64  user_list_id  =  4  [default  =  0];;
#     //  Optional  time  (seconds  since  the  epoch)  when  user  performed  an  action
#     //  causing  him  to  be  added  to  the  list.  If  0  or  not  specified,  then  the
#     //  upload  time  is  used.
#     optional  int64  time_added_to_user_list  =  5  [default  =  0];;
#     //  Set  to  true  if  the  operation  is  a  deletion.  For  user  attributes,
#     //  timestamps  from  attribute_rows  fields  will  be  extracted  and
#     //  existing  rows  with  matching  timestamps  will  be  removed.  If  no
#     //  attribute_rows  are  specified,  all  the  data  associated  with  the
#     //  attribute_id  is  deleted.  For  user  lists,  deletes  the  user  from
#     //  the  user_list_id.
#     optional  bool  delete  =  6  [default  =  false];;
#     //  An  id  indicating  the  data  source  which  contributed  this  membership.
#     //  The  id  is  required  to  be  in  the  range  of  1  to  1000  and  any  ids  greater
#     //  than  this  will  result  in  an  error  of  type  BAD_DATA_SOURCE_ID.
#     //  These  ids  don't  have  any  semantics  for  Google  and  are  just  used  as
#     //  labels  for  reporting  purposes.
#     optional  int32  data_source_id  =  7  [default  =  0];;
#     //  Same as time_added_to_user_list but in finer grained time, which is in
#     //  micro seconds. Only one of the two timestamp will be used, and if both are
#     //  specified, time_added_to_user_list_in_usec will be used.
#     optional int64 time_added_to_user_list_in_usec = 8 [default = 0];;
# }
# 
# //  This  protocol  buffer  is  used  to  update  user  attributes.  It  is  sent
# //  as  Content-­Type:  application/octet-­stream  (preferrably
# //  Content-­Encoding:  gzip)  payload  of  HTTPS  POST  requests.
# //
# message  UpdateUsersDataRequest  {
#     //  Multiple  operations  over  user  attributes  or  user  lists.
#     repeated  UserDataOperation  ops  =  1;;
# }
# 
# //  Response  error  codes.
# enum  ErrorCode  {
#     NO_ERROR  =  0;;
#     //  Some  of  the  user  data  operations  failed.  See  comments
#     //  in  the  UpdateUserDataResponse
#     PARTIAL_SUCCESS  =  1;;
#     //  Provided  network_id  cannot  add  data  to
#     //  attribute_id  or  non-­HTTPS  protocol  was  used  or  non-­whitelisted  IP
#     //  address  was  used.
#     PERMISSION_DENIED  =  2;;
#     //  Cannot  parse  payload  or  attribute  values  do  not  match  attribute  schema.
#      BAD_DATA  =  3;;
#     //  Cannot  decode  provided  cookie.
#     BAD_COOKIE  =  4;;
#     //  Invalid  user_list_id  or  attribute  id.
#     BAD_ATTRIBUTE_ID  =  5;;
#     //  User  list  or  attribute  was  closed.
#     CLOSED_ATTRIBUTE_ID  =  6;;
#     //  Invalid  network_id  was  provided  for  the  request.
#     BAD_NETWORK_ID  =  7;;
#     //  Request  payload  size  over  allowed  limit.
#     REQUEST_TOO_BIG  =  8;;
#     // No  UserDataOperation  messages  in  UpdateUsersDataRequest.
#     EMPTY_REQUEST  =  9;;
#     //  e.g.,  some  of  backend  services  were  unavailable.
#     INTERNAL_ERROR  =  10;;
#     //  The timestamp is a past/future time that is too far from current time.
#     BAD_TIMESTAMP = 12;;
#     //  Number  of  error  codes
#     NUM_ERROR_CODES  =  13;;
# }
# 
# //  Information  about  an  individual  error
# //
# //  Tag  5  was  deleted  on  10/14/2010  and  shouldn't  be  used  again.
# message  ErrorInfo  {
#     //  The  attribute_id  or  user_list_id  in  the  request  which  caused
#     //  problems.  This  may  be  empty  if  the  problem  was  with  a  particular
#     //  user  id.
#     optional  int64  attribute_id  =  1  [default  =  0];;
#     optional  int64  user_list_id  =  2  [default  =  0];;
#     //  The  cookie  which  caused  problems.  This  may  be  empty  if  we  determine
#     //  a  particular  attribute  was  bad  regardless  of  a  cookie.
#     optional  string  user_id  =  3  [default  =  ""];;
#     optional  ErrorCode  error_code  =  4;;
# }
# 
# //  Response  to  the  UpdateUsersDataRequest.  Sent  in  HTTP  response  to
# //  the  original  POST  request,  with
# //  Content-­Type:application/octet-­stream.  HTTP  response  status  is
# //  either  200  (no  errors)  or  400,  in  which  case  the  protocol  buffer
# //  will  provide  more  error  details.
# //
# message  UpdateUsersDataResponse  {
#     //  When  status  ==  PARTIAL_SUCCESS,  some  (not  all)  of  the  operations
#     //  failed  and  the  "errors"  field  has  details  on  the  types  and  number
#     //  of  errors  encountered.  When  status  ==  NO_ERROR,  all  the  data  was
#     //  imported  successfully.  When  status  >  PARTIAL_SUCCESS  no  data  was
#     //  imported.
#     optional  ErrorCode  status  =  1;;
#     //  Each  operation  that  failed  is  reported  as  a  separate  error  here
#     //  when  status  ==  PARTIAL_SUCCESS.
#     repeated  ErrorInfo  errors  =  2;;
# }
require 'protobuf/message/message'
require 'protobuf/message/enum'
require 'protobuf/message/service'
require 'protobuf/message/extend'

module DspCookieSync
  class AttributeRow < ::Protobuf::Message
    defined_in __FILE__
    class Column < ::Protobuf::Message
      defined_in __FILE__
      optional :string, :column_name, 1, :default => ""
      optional :string, :str_val, 2, :default => ""
      optional :int64, :int_val, 3, :default => 0
      optional :bool, :bool_val, 4, :default => false
    end
    repeated :Column, :columns, 1
    optional :int64, :time_added, 2, :default => 0
  end
  
  class UserDataOperation < ::Protobuf::Message
    defined_in __FILE__
    optional :string, :user_id, 1, :default => ""
    optional :int64, :user_list_id, 4, :default => 0
    optional :int64, :time_added_to_user_list, 5, :default => 0
    optional :bool, :delete, 6, :default => false
    optional :int32, :data_source_id, 7, :default => 0
    optional :int64, :time_added_to_user_list_in_usec, 8, :default => 0
  end
  
  class UpdateUsersDataRequest < ::Protobuf::Message
    defined_in __FILE__
    repeated :UserDataOperation, :ops, 1
  end
  
  class ErrorCode < ::Protobuf::Enum
    defined_in __FILE__
    NO_ERROR = value(:NO_ERROR, 0)
    PARTIAL_SUCCESS = value(:PARTIAL_SUCCESS, 1)
    PERMISSION_DENIED = value(:PERMISSION_DENIED, 2)
    BAD_DATA = value(:BAD_DATA, 3)
    BAD_COOKIE = value(:BAD_COOKIE, 4)
    BAD_ATTRIBUTE_ID = value(:BAD_ATTRIBUTE_ID, 5)
    CLOSED_ATTRIBUTE_ID = value(:CLOSED_ATTRIBUTE_ID, 6)
    BAD_NETWORK_ID = value(:BAD_NETWORK_ID, 7)
    REQUEST_TOO_BIG = value(:REQUEST_TOO_BIG, 8)
    EMPTY_REQUEST = value(:EMPTY_REQUEST, 9)
    INTERNAL_ERROR = value(:INTERNAL_ERROR, 10)
    BAD_TIMESTAMP = value(:BAD_TIMESTAMP, 12)
    NUM_ERROR_CODES = value(:NUM_ERROR_CODES, 13)
  end
  
  class ErrorInfo < ::Protobuf::Message
    defined_in __FILE__
    optional :int64, :user_list_id, 2, :default => 0
    optional :string, :user_id, 3, :default => ""
    optional :ErrorCode, :error_code, 4
  end
  
  class UpdateUsersDataResponse < ::Protobuf::Message
    defined_in __FILE__
    optional :ErrorCode, :status, 1
    repeated :ErrorInfo, :errors, 2
  end

  class ResponseError < StandardError
  end
end
